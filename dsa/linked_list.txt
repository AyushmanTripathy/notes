LINKED LIST
-----------

WHEN
  elements have to be kept in order
  and length can be changed in O(1)

HOW
  each node has a val and a next pointer

O(n) time and O(1) time

SINGLY LINKED
-------------

when related to size, use two pointer
(use difference between pointer)

adding a dummy node to start
(return dummy->next)

about cycles -> tortoise and hare

ARRAY AS LISTS
--------------

if max value < size of array
every index's value is next index
duplicate values -> cycles in list

WHEN
  finding duplicates

MERGING K LISTS
---------------
time: O(n * logk)
space: O(1)

while (k > 1) {
  for (int i = 0; i < k / 2; i++)
    lists[i] = merge_list(lists[i], lists[k - i - 1])
  k = (k + 1) / 2
}
return lists[0]
